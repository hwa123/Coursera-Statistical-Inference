temp
temp == max(temp)
names(temp)[TRUE]
names(temp)[temp == min(temp)]
swirl()
range(cars$price)
range(cars$price)[2]
range(cars$price)[2]-range(car$price)[1]
range(cars$price)[2]-range(cars$price)[1]
var(cars$price)
sg(cars$price)
sd(cars$price)
30
View(cars)
range(cars$price)[2]-range(cars$price)[1]
range(cars$price&cars$type = "midsize")[2]-range(cars$price&cars$type= "midsize")[1]
range(cars$price&cars$type == "midsize")[2]-range(cars$price&cars$type== "midsize")[1]
range(cars$price&cars$type == "midsize")
range(cars$price && cars$type == "midsize")
range(cars$price & cars$type == "large")
range(cars$type == "large")
cars$type == "large"
cars$price[cars$type]
cars$price[cars$type=='large']
5
1
10
25
1
3
2
4
summary(cars$price)
swirl()
install.packages("dplyr")
library("swirl")
swirl()
swirl()
swirl()
swirl()
library(dplyr)
View(mydf)
cran >- tbl_df(mydf)
cran <- tbl_df(mydf)
View(cran)
rm("mydf")
view(Cran)
view(cran)
View(cran)
cran
group_by()
help group_by()
help group_by
help group_by
help(group_by)
by_package <- group_by(cran,package)
by_package
summarize(mean(size))
summarize(by_package)
summarize(by_package,mean(size))
View(by_package)
submit()
tbl
pack_sum
quantile(pack_sum$count,prob=0.99)
top_countsfilter(pack_sum[pack_sum$count > 679])
top_counts<-filter(pack_sum[pack_sum$count > 679])
top_counts<-filter(pack_sum$count > 679)
top_counts<-filter(pack_sum$count[pack_sum$count > 679])
help(filter)
library(filter)
library(dplyr)
help(filter)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
View(top_counts)
arrange(top_counts,count desc)
?arrange
arrange(top_counts,desc(count)
arrange(top_counts,desc(count))
top_counts_sorted<- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
View(by_package)
View(pack_sum)
filter(pack_sum, unique > 465)
top_unique<-filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique,desc(unique))
top_unique_sorted<- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
submit()
?mutate
submit()
submit()
submit()
submit()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
View(result3)
View(mydf)
path2csv
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(("dplyr"))
packageVersion("dplyr")
cran <- tbl_df(mydf)
View(cran)
rm(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cram,-time)
select(cran,-time)
View(cran)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,pckage == "swirl")
filter(cran,package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 < -select(cran,size:ip_id)
cran2 <-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
swirl()
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
library("tidyr")
library(tidyr)
library(dplyr)
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
load(file.path("C:\Users\Huan\AppData\Local\Temp\Rtmp2xsGxk/downloaded_packages/tidyr_0.3.1.tar.gz",'.RData'))
load(file.path("C:\Users\Huan\AppData\Local\Temp\Rtmp2xsGxk/downloaded_packages/tidyr_0.3.1.tar.gz",".RData"))
download.file('https://cran.rstudio.com/src/contrib/tidyr_0.3.1.tar.gz',f<- tempfile())
unzip(f,exdir = tempdir())
View(result1)
unzip(f,exdir = tempdir())
load(file.path(tempdir(),'.RData'))
library("sqldf")
package.install("sqldf")
install.packages("sqldf")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
", destfile = "getdata.csv", method = "libcurl")
acs <- fread(input = "getdata.csv", sep = ",")
acs <- read.csv(textConnection("getdata.csv"))
library("RCurl")
library(RCurl)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
x <- getURL(url,ssl.verifypeer = FALSE)
asc <- read.csv(textConnection(x))
acs <- read.csv(textConnection(x))
View(asc)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(RCurl)
htm<- "http://biostat.jhsph.edu/~jleek/contact.html "
con <- url(htm)
htmlcode<-readLines(con =)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package= "lubridate")
help(package= lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975)
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd(//"192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14" )
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
tththis_moment
this_moment
update(this_moment,now())
update(this_moment,hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment,hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now()
nyc<-now("America/New_York")
nyc
nyc+days(2)
depart<-nyc+days(2)
depart
depart<-update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + day(1.5)
arrive <- depart + day(2)
arrive <- depart + hours(15)
arrive <- depart + hours(15) + minute(50)
arrive <- depart + hours(15) + minutes(50)
?with)tz
?with_tz
arrive(with_tz(arrive, "Asia/Hong_Kong"))
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- ymd("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
?as.period
stopwatch()
install.packages(fields)
install.packages("fields")
install.packages("fields", repos = NULL)
install.packages("fields")
install.packages("map")
install.packages("maps")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
table(BodyWeight$Diet)
table(BodyWeight$Rat)
?panel.abline
?lines
points
?points
?axis
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?trellis.par.set
library(datasets)
data("airquality")
head(airquality)
table(airquality$Month)
qplot(Wind, Ozone, data = airquality, geom= "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~factor(month))
?qplot
airquality = transform(airquality, Month = factor(Month))
head(airquality)
library("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~factor(month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
?geo
?geom
?"ggplot2"
?"geom"
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'acs4.csv',method = 'curl')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'acs4.csv',method = 'rcurl')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'acs4.csv',method = 'luibcurl')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'acs4.csv',method = 'libcurl')
acs <- read.csv('acs4.csv')
getwd()
names <- names(acs)
strsplit(names,'wgtp')[123]
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP4.csv'
download.file(file.url, file.dest, method='wget')
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP4.csv'
download.file(file.url, file.dest, method='libcurl')
GDP <- read.csv(file.dest, skip=4, nrows=190)
GDPdol <- gsub(",", "", GDP$X.4)
mean(GDPdol, na.rm = TRUE)
GDPdol <- as.integer(GDPdol)
mean(GDPdol, na.rm = TRUE)
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP4.csv'
download.file(file.url, file.dest, method='libcurl')
GDP <- read.csv(file.dest, skip=4, nrows=190)
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- 'edu.csv'
download.file(file.url, file.dest, method='libcurl')
edu <- read.csv(file.dest)
merged <- merge(GDP, edu, by.x = 'X', by.y = 'CountryCode')
fy.june <- grep('Fiscal year end: June', merged$Special.Notes)
length(fy.june
length(fy.june)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
year2012 <- grepl('2012-*', sampleTimes)
table(year2012)
day <- format(sampleTimes2012, '%A')
sampleTimes2012 <- subset(sampleTimes, year2012)
sampleTimes2012 <- subset(sampleTimes, year2012)
day <- format(sampleTimes2012, '%A')
table(day)
swirl()
library("swirl")
swirl()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
ppm
quantile(ppn)
quantile(ppm)
blue<-col
boxplot(ppm, color = blue)
boxplot(ppm, color = "blue")
boxplot(ppm, col = "blue")
?abline
abline( h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(gram, col = "green", argument breaks = 100)
hist(ppm, col = "green", argument breaks = 100)
?hist
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
hist(ppm, col = "green", v = 12, lwd = 2)
?hist
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta",lwd = 4)
names(pollution)
pollution$region
reg <- table(pollution$region
)
reg
barplot(reg, col = "wheat",main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1), mar= c(4,4,2,1))
east<- subset(pollution, boolean = testing)
east<- subset(pollution, region = "est")
east<- subset(pollution, region = "east")
east<- subset(pollution, region == "east")
head(east)
hist(pm25, col = "green")
hist(east$pm25, col = "green")
west <- subset(west$pm25, col = "green", region ="west")
west <- subset(subset(pollution, region == "east")$pm25, col = "green", region ="west")
hist(subset(pollution, region == "east")$pm25, col = "green", region ="west")
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<- subset(pollution, region = "west")
west<- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(subset(pollution, region == "east")$latitude, subset(pollution, region == "east")$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful,plot(eruptions, waiting)
)
with(faithful,plot(eruptions, waiting), main = "Old
| Faithful Geyser data")
title(main = "Old
| Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
getwd()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off
dev.off)
dev.off()
dev.cur()
with(faithful, plot(eruptions,
| waiting))
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file = "geyserplot.png")
dev.off()
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week <- c(132,135,151,146,130)
test <- data.frame(subject, baseline, week)
t <- t.test(x = test$baseline,y= test$week, alt ="two.sided", paired = TRUE)
t$p.value
confidenceInterval = 1100 + c(-1,1)*qt(0.975, 8)*30/3
test <- binom.test(3,4 alt ="greater")
test <- binom.test(x=3,n=4 alt="greater")
test <- binom.test(x=3,n=4 alternative="greater")
test <- binom.test(x=3,n=4, alternative ="greater")
test$p.value
test <- t.test(x=10,y=1787,alt ="one.sided")
test < - poisson.test(10,T =1787, r = 0.1, alt = "less")
test < - poisson.test(10,T =1787, r = 00.1, alt = "less")
test < - poisson.test(10,T =1787, r = 0.01, alt = "less")
test <- poisson.test(10,T = 1787, r = 0.01, alt = "less")
test$p.value
qt(1-0.05/2,8)
qt?
?qt
10*qt(1-0.05/2,8)*c(-1,1)+1100
qt(1-0.05,8)
-2/qt(1-0.05/2,8)
-2/qt(1-0.05/2,8)*3
-2/qt(1-0.05/2,9)*sqrt(0.6)*c(-1,1)+3
-2/qt(1-0.05/2,9)*sqrt(0.6)*c(-1,1)+5
-2/qt(1-0.05/2,9)*sqrt(0.6)*c(-1,1)+5 - (-2/qt(1-0.05/2,9)*sqrt(0.6)*c(-1,1)+3)
-2/qt(1-0.05/2,9)*sqrt(0.68)*c(-1,1)+5 - (-2/qt(1-0.05/2,9)*sqrt(0.6)*c(-1,1)+3)
nx = 9
ny=9
var_x = 1
var_y = 1.8^2
x_bar = -3
y_bar = 1.5
sp <- sqrt(((nx-1)*var_x + (ny-1)*var_y)/(nx+ny-2))
ts <- qt(1-(0.1)/2,nx+ny-2)
(y_bar – x_bar) * c(-1,1) *ts*sp*(sqrt(1/nx+1/ny))
(y_bar-x_bar) * c(-1,1) *ts*sp*(sqrt(1/nx+1/ny))
y_bar = 1
var_x = 1.5^2
(y_bar-x_bar) * c(-1,1) *ts*sp*(sqrt(1/nx+1/ny))
(x_bar-y_bar) * c(-1,1) *ts*sp*(sqrt(1/nx+1/ny))
(x_bar-y_bar) + c(-1,1) *ts*sp*(sqrt(1/nx+1/ny))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
?runif
runif(40)
c(null, mean(Runif(40)))
c(NULL, mean(Runif(40)))
c(NULL, mean(runif(40)))
install.packages(knitr)
setwd("C:/Users/Huan/Documents/R/Coursera/Statistical Inference")
source("PA1_SI.r")
source('~/R/Coursera/Statistical Inference/PA1_SI.R')
source('~/R/Coursera/Statistical Inference/PA1_SI.R')
source('~/R/Coursera/Statistical Inference/PA1_SI.R')
source('~/R/Coursera/Statistical Inference/PA1_SI.R')
source('~/R/Coursera/Statistical Inference/PA1_SI.R')
source('~/R/Coursera/Statistical Inference/PA1_SI.R')
source('~/R/Coursera/Statistical Inference/PA1_SI.R')
library(latex)
?latex
install.packages("latex")
install.packages("pandoc")
source('~/R/Coursera/Statistical Inference/PA1_SI.R')
source('~/R/Coursera/Statistical Inference/PA1_SI.R')
